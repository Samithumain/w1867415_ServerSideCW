const { Sequelize } = require('sequelize');  
const User = require('../models/userModel');
const ApiKey = require('../models/apiKeyModel');
const { sequelize } = require('../config/db'); 
const crypto = require('crypto');


async function getAllUsersWithApiData(req, res) {  
  try {
    const usersWithApiKeys = await User.findAll({
      include: {
        model: ApiKey,
        required: false, 
        where: {
          userId: { [Sequelize.Op.eq]: Sequelize.col('User.id') }  
        },
        attributes: ['apiKey', 'apiCount', 'createdAt', 'updatedAt'],
      },
      attributes: ['id', 'username', 'email', 'createdAt', 'updatedAt'],
    });

    if (!usersWithApiKeys || usersWithApiKeys.length === 0) {
      return res.status(404).json({ message: 'No users found' });
    }

    res.json({ users: usersWithApiKeys });
  } catch (err) {
    res.status(500).json({ message: 'Failed to retrieve users and API key data', error: err.message });
  }


  

};



async function deleteUserAndApiKey(req, res) {
    const userId = req.params.userId;
  
    try {
        const user = await User.findOne({ where: { id: userId } });
  
      if (!user) {
        return res.status(404).json({ error: 'User not found or email mismatch' });
      }
  
      const apiKey = await ApiKey.findOne({ where: { userId } });
  
      if (apiKey) {
        await ApiKey.destroy({ where: { userId } });
        console.log('API key deleted');
      }
  
      await user.destroy();
      console.log('User deleted');
  
      return res.status(200).json({ message: 'User and associated data deleted successfully' });
  
    } catch (error) {
      console.error('Error:', error);
      return res.status(500).json({ error: 'Failed to delete user and API key', error: error.message });
    }
  }
  

  
async function deletekey(req, res) {
   const  apiKey  = req.params.apikey;
    
        try {
          const key = await ApiKey.findOne({ where: { apiKey } });
    
          if (!key) {
            return res.status(404).json({ error: 'API key not found' });
          }
    
          await ApiKey.destroy({ where: { apiKey } });
    
          res.status(200).json({ message: 'API key revoked successfully' });
        } catch (error) {
          console.error(error);
          res.status(500).json({ error: 'Something went wrong' });
        }
  
  }

  async function regenkey(req, res) {
    const userId = req.params.userId;
  



        try{
      const apiKey = crypto.randomBytes(32).toString('hex'); 
    
        const newApiKey = await ApiKey.create({
            userId: userId,
            apiKey: apiKey,
        });
    
        res.status(200).json({ message: 'API key generated successfully', apiKey: newApiKey.apiKey });
        } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Something went wrong while generating the API key' });
        }
  



  }
  

module.exports = {
    deleteUserAndApiKey,
    getAllUsersWithApiData,
    deletekey,
    regenkey
  };
  